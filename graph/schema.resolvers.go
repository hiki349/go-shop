package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"go-shop/graph/model"
	"log"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the create_user field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := r.UsersService.CreateUser(ctx, input)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Email:     user.Email,
		Password:  user.Password,
		CreatedAt: user.CreatedAt,
		UpdatetAt: user.UpdatetAt,
	}, nil
}

// DeleteUser is the resolver for the delete_user field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.UsersService.DeleteUser(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// GetUser is the resolver for the get_user field.
func (r *queryResolver) GetUser(ctx context.Context, id uuid.UUID) (*model.User, error) {
	user, err := r.UsersService.GetUserByID(ctx, id)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Email:     user.Email,
		Password:  user.Password,
		CreatedAt: user.CreatedAt,
		UpdatetAt: user.UpdatetAt,
	}, nil
}

// GetUsers is the resolver for the get_users field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	users, err := r.UsersService.GetUsers(ctx)
	if err != nil {
		return nil, err
	}

	var res []*model.User
	for _, v := range users {
		user := &model.User{
			ID:        v.ID,
			Username:  v.Username,
			Email:     v.Email,
			Password:  v.Password,
			CreatedAt: v.CreatedAt,
			UpdatetAt: v.UpdatetAt,
		}

		res = append(res, user)
	}

	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
