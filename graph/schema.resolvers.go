package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"log"
	"log/slog"
	"time"

	"github.com/google/uuid"

	"go-shop/graph/model"
	"go-shop/internal/metrics"
)

// Create is the resolver for the create field.
func (r *mutationResolver) Create(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	newProduct, err := r.ProductsService.CreateProduct(ctx, input)
	if err != nil {
		slog.Error("%w", err)
		return nil, err
	}

	return &model.Product{
		ID:          newProduct.ID,
		Title:       newProduct.Title,
		ImageURL:    newProduct.ImageURL,
		Description: newProduct.Description,
		Price:       float64(newProduct.Price),
		CreatedAt:   newProduct.CreatedAt,
		UpdatedAt:   newProduct.UpdatedAt,
	}, nil
}

// Delete is the resolver for the delete field.
func (r *mutationResolver) Delete(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.ProductsService.DeleteProduct(ctx, id)
	if err != nil {
		return false, err
	}

	return true, err
}

// GetAll is the resolver for the get_all field.
func (r *queryResolver) GetAll(ctx context.Context) ([]*model.Product, error) {
	start := time.Now()
	defer func() {
		metrics.ObserveRequest(time.Since(start))
	}()

	products, err := r.ProductsService.GetProducts(ctx)
	if err != nil {
		log.Println("%w", err)
		return nil, err
	}

	var res []*model.Product

	for _, v := range products {
		product := &model.Product{
			ID:          v.ID,
			Title:       v.Title,
			ImageURL:    v.ImageURL,
			Description: v.Description,
			Price:       float64(v.Price),
			CreatedAt:   v.CreatedAt,
			UpdatedAt:   v.UpdatedAt,
		}

		res = append(res, product)
	}

	return res, nil
}

// GetByID is the resolver for the get_by_id field.
func (r *queryResolver) GetByID(ctx context.Context, id uuid.UUID) (*model.Product, error) {
	product, err := r.ProductsService.GetProduct(ctx, id)
	if err != nil {
		log.Println("%w", err)
		return nil, err
	}

	return &model.Product{
		ID:          product.ID,
		Title:       product.Title,
		ImageURL:    product.ImageURL,
		Description: product.Description,
		Price:       float64(product.Price),
		CreatedAt:   product.CreatedAt,
		UpdatedAt:   product.UpdatedAt,
	}, nil
}

// GetUser is the resolver for the get_user field.
func (r *queryResolver) GetUser(ctx context.Context, id uuid.UUID) (*model.User, error) {
	user, err := r.UsersService.GetUserByID(ctx, id)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Email:     user.Email,
		Password:  user.Password,
		CreatedAt: user.CreatedAt,
		UpdatetAt: user.UpdatetAt,
	}, nil
}

// GetUsers is the resolver for the get_users field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	users, err := r.UsersService.GetUsers(ctx)
	if err != nil {
		return nil, err
	}

	var res []*model.User
	for _, v := range users {
		user := &model.User{
			ID:        v.ID,
			Username:  v.Username,
			Email:     v.Email,
			Password:  v.Password,
			CreatedAt: v.CreatedAt,
			UpdatetAt: v.UpdatetAt,
		}

		res = append(res, user)
	}

	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
