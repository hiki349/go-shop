package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"
	"log/slog"
	"time"

	"github.com/google/uuid"

	"go-shop/internal/api/gql/generated"
	"go-shop/internal/api/gql/model"
	"go-shop/internal/storage/repo"
)

// Product is the resolver for the product field.
func (r *mutationResolver) Product(ctx context.Context) (model.ProductMutation, error) {
	return model.ProductMutation{}, nil
}

// Create is the resolver for the create field.
func (r *productMutationResolver) Create(ctx context.Context, obj *model.ProductMutation, input model.NewProduct) (model.ProductCreateResult, error) {
	var updatedAt *time.Time

	newProduct, err := r.ProductsService.CreateProduct(ctx, input)
	if err != nil {
		slog.Error("%w", err)

		return model.InternalError{Message: "internal error"}, nil
	}

	if !newProduct.CreatedAt.IsZero() {
		updatedAt = &newProduct.UpdatedAt
	}

	product := &model.Product{
		ID:          newProduct.ID,
		Title:       newProduct.Title,
		ImageURL:    newProduct.ImageURL,
		Description: newProduct.Description,
		Price:       float64(newProduct.Price),
		CreatedAt:   newProduct.CreatedAt,
		UpdatedAt:   updatedAt,
	}

	return model.ProductCreate{
		Product: product,
	}, nil
}

// Update is the resolver for the update field.
func (r *productMutationResolver) Update(ctx context.Context, obj *model.ProductMutation, id uuid.UUID, input model.NewProduct) (model.ProductUpdateResult, error) {
	var updatedAt *time.Time

	product, err := r.ProductsService.UpdateProduct(ctx, id, input)
	if err != nil {
		slog.Error("%w", err)

		if errors.Is(err, repo.ErrNotFound) {
			return model.NotFound{Message: "Product not found"}, nil
		}

		return model.InternalError{Message: "internal error"}, nil
	}

	if !product.CreatedAt.IsZero() {
		updatedAt = &product.UpdatedAt
	}

	res := &model.Product{
		ID:          product.ID,
		Title:       product.Title,
		ImageURL:    product.ImageURL,
		Description: product.Description,
		Price:       float64(product.Price),
		CreatedAt:   product.CreatedAt,
		UpdatedAt:   updatedAt,
	}

	return model.ProductUpdate{
		Product: res,
	}, nil
}

// Delete is the resolver for the delete field.
func (r *productMutationResolver) Delete(ctx context.Context, obj *model.ProductMutation, id uuid.UUID) (model.ProductDeleteResult, error) {
	err := r.ProductsService.DeleteProduct(ctx, id)
	if err != nil {
		if errors.Is(err, repo.ErrNotFound) {
			return model.NotFound{Message: "Product not found"}, nil
		}

		return model.InternalError{Message: "internal error"}, nil
	}

	return model.ProductDelete{
		IsDelete: true,
	}, err
}

// ProductMutation returns generated.ProductMutationResolver implementation.
func (r *Resolver) ProductMutation() generated.ProductMutationResolver {
	return &productMutationResolver{r}
}

type productMutationResolver struct{ *Resolver }
