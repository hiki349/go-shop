package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"go-shop/internal/api/gql/model"
	"go-shop/internal/api/gql/runtime"
	"log/slog"

	"github.com/google/uuid"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, data model.ProductReq) (*model.Product, error) {
	product, err := r.Services.CreateProduct(ctx, data)
	if err != nil {
		return nil, err
	}

	return product, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id uuid.UUID, data model.ProductReq) (*model.Product, error) {
	product, err := r.Services.UpdateProduct(ctx, id, data)
	if err != nil {
		return nil, err
	}

	return product, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.Services.DeleteProduct(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	products, err := r.Services.GetProducts(ctx)
	if err != nil {
		slog.Info("error: ", err)
		return nil, err
	}

	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id uuid.UUID) (*model.Product, error) {
	product, err := r.Services.GetProduct(ctx, id)
	if err != nil {
		slog.Info("error: ", err)
		return nil, err
	}

	return product, nil
}

// Mutation returns runtime.MutationResolver implementation.
func (r *Resolver) Mutation() runtime.MutationResolver { return &mutationResolver{r} }

// Query returns runtime.QueryResolver implementation.
func (r *Resolver) Query() runtime.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
