package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"log"
	"time"

	"github.com/google/uuid"

	"go-shop/internal/api/gql/generated"
	"go-shop/internal/api/gql/model"
)

// User is the resolver for the user field.
func (r *mutationResolver) User(ctx context.Context) (model.UserMutation, error) {
	return model.UserMutation{}, nil
}

// Create is the resolver for the create field.
func (r *userMutationResolver) Create(ctx context.Context, obj *model.UserMutation, input model.NewUser) (model.UserCreateResult, error) {
	var updatedAt *time.Time

	user, err := r.UsersService.CreateUser(ctx, input)
	if err != nil {
		return model.InternalError{Message: "internal error"}, nil
	}

	if !user.UpdatedAt.IsZero() {
		updatedAt = &user.UpdatedAt
	}

	res := &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Email:     user.Email,
		Password:  user.Password,
		CreatedAt: user.CreatedAt,
		UpdatetAt: updatedAt,
	}

	return model.UserCreate{
		User: res,
	}, nil
}

// Update is the resolver for the update field.
func (r *userMutationResolver) Update(ctx context.Context, obj *model.UserMutation, id uuid.UUID, input model.NewUser) (model.UserUpdateResult, error) {
	var updatedAt *time.Time

	user, err := r.UsersService.UpdateUser(ctx, id, input)
	if err != nil {
		log.Println(err)

		return model.InternalError{Message: "internal error"}, nil
	}

	if !user.UpdatedAt.IsZero() {
		updatedAt = &user.UpdatedAt
	}

	res := &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Email:     user.Email,
		Password:  user.Password,
		CreatedAt: user.CreatedAt,
		UpdatetAt: updatedAt,
	}

	return model.UserUpdate{
		User: res,
	}, nil
}

// Delete is the resolver for the delete field.
func (r *userMutationResolver) Delete(ctx context.Context, obj *model.UserMutation, id uuid.UUID) (model.UserDeleteResult, error) {
	err := r.UsersService.DeleteUser(ctx, id)
	if err != nil {
		return model.InternalError{Message: "internal error"}, nil
	}

	return model.UserDelete{
		IsDelete: true,
	}, nil
}

// UserMutation returns generated.UserMutationResolver implementation.
func (r *Resolver) UserMutation() generated.UserMutationResolver { return &userMutationResolver{r} }

type userMutationResolver struct{ *Resolver }
