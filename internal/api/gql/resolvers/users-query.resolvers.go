package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"log"
	"time"

	"github.com/google/uuid"

	"go-shop/internal/api/gql/generated"
	"go-shop/internal/api/gql/model"
)

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) (model.UsersQuery, error) {
	return model.UsersQuery{}, nil
}

// GetByID is the resolver for the get_by_id field.
func (r *usersQueryResolver) GetByID(ctx context.Context, obj *model.UsersQuery, id uuid.UUID) (model.UserFoundResult, error) {
	var updatedAt *time.Time

	user, err := r.UsersService.GetUserByID(ctx, id)
	if err != nil {
		log.Println(err)

		return model.InternalError{Message: "internal error"}, nil
	}

	if !user.UpdatedAt.IsZero() {
		updatedAt = &user.UpdatedAt
	}

	res := &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Email:     user.Email,
		Password:  user.Password,
		CreatedAt: user.CreatedAt,
		UpdatetAt: updatedAt,
	}

	return model.UserFound{
		User: res,
	}, nil
}

// GetAll is the resolver for the get_all field.
func (r *usersQueryResolver) GetAll(ctx context.Context, obj *model.UsersQuery) (model.UsersFoundResult, error) {
	users, err := r.UsersService.GetUsers(ctx)
	if err != nil {
		return model.InternalError{Message: "inernal error"}, nil
	}

	var res []*model.User
	for _, v := range users {
		var updatedAt *time.Time

		if !v.UpdatedAt.IsZero() {
			updatedAt = &v.UpdatedAt
		}

		user := &model.User{
			ID:        v.ID,
			Username:  v.Username,
			Email:     v.Email,
			Password:  v.Password,
			CreatedAt: v.CreatedAt,
			UpdatetAt: updatedAt,
		}

		res = append(res, user)
	}

	return model.UsersFound{
		Users: res,
	}, nil
}

// UsersQuery returns generated.UsersQueryResolver implementation.
func (r *Resolver) UsersQuery() generated.UsersQueryResolver { return &usersQueryResolver{r} }

type usersQueryResolver struct{ *Resolver }
